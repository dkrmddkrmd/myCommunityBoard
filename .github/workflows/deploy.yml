# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Deploy to AWS EC2

# 워크플로우가 언제 실행될지를 정의합니다.
on:
  push:
    branches:
      - main  # main 브랜치에 push 이벤트가 발생했을 때 실행됩니다.

# 워크플로우에서 실행될 작업(job)들을 정의합니다.
jobs:
  # 'build'라는 이름의 작업을 정의합니다.
  build:
    # 이 작업을 실행할 가상 머신의 OS를 지정합니다. (Ubuntu 최신 버전)
    runs-on: ubuntu-latest

    # 작업 내에서 실행될 단계(step)들을 순서대로 정의합니다.
    steps:
      # 1. 소스 코드 체크아웃
      # GitHub 저장소의 코드를 가상 머신으로 가져옵니다.
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      # Spring Boot 프로젝트를 빌드하기 위해 Java 17을 설치합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 부여
      # gradlew 스크립트를 실행할 수 있도록 권한을 설정합니다.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 프로젝트 빌드
      # ./gradlew build를 실행하여 .jar 파일을 생성합니다.
      - name: Build with Gradle
        run: ./gradlew build

      # 5. Docker Hub 로그인
      # 빌드한 Docker 이미지를 Docker Hub에 올리기 위해 로그인합니다.
      # Docker Hub 사용자 이름과 토큰은 GitHub Secrets에서 가져옵니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Docker 이미지 빌드 및 푸시
      # Dockerfile을 사용하여 이미지를 빌드하고, Docker Hub에 푸시합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/community-board-app:latest

      # 7. EC2에 접속하여 배포
      # SSH를 통해 AWS EC2 인스턴스에 접속하고, 배포 스크립트를 실행합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/community-board-app:latest
            docker stop $(docker ps -a -q --filter="name=community-board-app") || true
            docker rm $(docker ps -a -q --filter="name=community-board-app") || true
            docker run -d --name community-board-app -p 8080:8080 \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/community-board-app:latest